'''
Create a function to find the closure of a given set of attributes
fd1 = ([1],[2])
fd2 = ([2,3],[4,5])
allfds = [fd1,fd2]
print(closure([1,2,3,4,5],allfds))
'''
from itertools import chain, combinations

'''
A FD class with each object storing one functional dependency.
@param name: name of the FD (fd1, fd2 etc)
@param lhs: the first string of an fd tuple (known att)
@param rhs: the second string of an fd tuple (inferred att) 
'''
class FD:
    def __init__(self, lhs, rhs):
        self.lhs = lhs
        self.rhs = rhs
    def __str__(self):
        return str(self.lhs) + '->' +str(self.rhs)
    def isTrivial (self):
        return self.rhs <= self.lhs

class closure:
    def __init__(self, attributes, allfds):
        self.attributes = attributes
        self.givenfds = allfds
        self.myClosure = []
        self.pset = list(chain.from_iterable(combinations(self.attributes,i) 
                                             for i in range (1, len(self.attributes)+1)))
    def __str__(self):
        return self.myClosure
    #def getClosure(self):
    
    def useReflexivity(self):
        'generate all the trivial FDs'
        for i in self.pset:
            for j in i:
                trivialFd = FD(i,j)
                self.myClosure.append(trivialFd)
    
    def useAugmentation(self):
        
        
        
        
        
        